@inject IToastService ToastService
@inject IDialogService DialogService

<FluentGrid Style="width:100%;">
    @foreach (var item in AddedExercises.OrderBy(x => x.Index))
    {
        <FluentGridItem xs="12" sm="12" md="6" lg="4" xl="3">
            
                <ExerciseWorkoutFormItem WorkoutId="WorkoutId"
                    Item="item"
                    OnAddSet="OnAddSetAsync"
                    OnCopySet="OnCopySet"
                    OnEditSet="OnEditSetAsync"
                    OnRemoveSet="OnRemoveSetAsync"
                    OnRemoveExercise="OnRemoveExercise"/>
            
        </FluentGridItem>
    }
</FluentGrid>

@code {
    [Parameter] public Guid? WorkoutId { get; set; }
    [Parameter] public ICollection<ExerciseSetCreateFormViewModel> AddedExercises { get; set; }
    [Parameter] public EventCallback<ICollection<ExerciseSetCreateFormViewModel>> AddedExercisesChanged { get; set; }
    [Parameter] public ICollection<ExerciseDto> Exercises { get; set; }

    private async Task OnAddSetAsync(Guid exerciseId)
    {
        var result = await ShowDialogAsync(exerciseId, new() { Id = Guid.NewGuid() });
        if (!result.Cancelled && result.Data != null)
        {
            try
            {
                var addedSet = (ExerciseSetFormViewModel)result.Data;

                var addedExercise = this.AddedExercises.FirstOrDefault(x => x.Exercise.Id.ToString() == exerciseId.ToString());
                addedExercise.Sets = addedExercise.Sets ?? [];
                addedSet.CreateDto.Index = addedExercise.Sets.Count + 1;
                addedExercise.Sets.Add(addedSet.CreateDto);

                this.ToastService.ShowSuccess("Set uspješno dodan.");
            }
            catch (Exception)
            {
                this.ToastService.ShowError("Dodavanje set nije uspjelo.");
            }
        }
    }

    private async Task OnCopySet(EditSetEventArgs args)
    {
        try
        {
            var addedExercise = this.AddedExercises.FirstOrDefault(x => x.Exercise.Id.ToString() == args.ExerciseId.ToString());
            var set = new ExerciseSetCreateDto()
            {
                Id = Guid.NewGuid(),
                Index = addedExercise.Sets.Count + 1,
                Note = args.Set.Note,
                Reps = args.Set.Reps,
                Time = args.Set.Time,
                Weight = args.Set.Weight
            };
            addedExercise.Sets.Add(set);
            this.ToastService.ShowSuccess("Set je uspješno kopiran.");
        }
        catch (Exception ex)
        {
            this.ToastService.ShowError("Kopiranje sets nije uspjelo.");
        }
    }
    private async Task OnEditSetAsync(EditSetEventArgs args)
    {
        var result = await ShowDialogAsync(args.ExerciseId, args.Set);
        if (!result.Cancelled && result.Data != null)
        {
            try
            {
                var editedSet = (ExerciseSetFormViewModel)result.Data;

                var editedExercise = this.AddedExercises.FirstOrDefault(x => x.Exercise.Id.ToString() == args.ExerciseId.ToString());
                var oldSet = editedExercise.Sets.FirstOrDefault(x => x.Id == editedSet.CreateDto.Id);
                oldSet.Reps = editedSet.CreateDto.Reps;
                oldSet.Weight = editedSet.CreateDto.Weight;
                oldSet.Time = editedSet.CreateDto.Time;

                this.ToastService.ShowSuccess("Set uspješno dodan.");
                await this.AddedExercisesChanged.InvokeAsync(this.AddedExercises);
            }
            catch (Exception)
            {
                this.ToastService.ShowError("Dodavanje set nije uspjelo.");
            }
        }
    }

    private async Task OnRemoveSetAsync(EditSetEventArgs args)
    {
        var exercise = this.AddedExercises.FirstOrDefault(x => x.Exercise.Id == args.ExerciseId);
        var set = exercise?.Sets.FirstOrDefault(x => x.Id == args.Set.Id);
        if (set != null)
        {
            exercise?.Sets.Remove(set);
            await this.AddedExercisesChanged.InvokeAsync(this.AddedExercises);
        }
    }

    private void OnRemoveExercise(Guid exerciseId)
    {
        var addedExercise = this.AddedExercises.FirstOrDefault(x => x.Exercise.Id.ToString() == exerciseId.ToString());
        if (addedExercise != null)
        {
            this.AddedExercises.Remove(addedExercise);
        }
    }

    private async Task<DialogResult?> ShowDialogAsync(Guid exerciseId, ExerciseSetCreateDto setCreateDto)
    {
        var dto = new ExerciseSetFormViewModel();
        dto.Exercise = this.Exercises.FirstOrDefault(x => x.Id.ToString() == exerciseId.ToString());
        dto.CreateDto = setCreateDto;
        var dialog = await DialogService.ShowDialogAsync<ExerciseSetFormDialog>(dto, new DialogParameters()
            {
                Title = $"Set info",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        return await dialog.Result;
    }
}