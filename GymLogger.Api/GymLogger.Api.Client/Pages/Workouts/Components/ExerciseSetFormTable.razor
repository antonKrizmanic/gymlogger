<table style="width:100%;table-layout:auto;">
    @if (Exercise.ExerciseLogType == ExerciseLogType.Weight ||
    Exercise.ExerciseLogType == ExerciseLogType.NegativeWeight)
    {
        <thead>
            <tr>
                <th>#</th>
                <th>Ponavljanja x Težina(kg)</th>
                <th>Napomena</th>
                <th style="min-width: 110px;"></th>
            </tr>

        </thead>
    }
    else if (Exercise.ExerciseLogType == ExerciseLogType.Time)
    {
        <thead>
            <tr>
                <th>Set</th>
                <th>Vrijeme (s)</th>
                <th>Napomena</th>
                <th style="min-width: 110px;"></th>
            </tr>
        </thead>
    }
    @foreach (var set in Sets.OrderBy(x =>x.Index))
    {
        <tr>
            <td>@set.Index</td>
            @if (Exercise.ExerciseLogType == ExerciseLogType.Weight || Exercise.ExerciseLogType == ExerciseLogType.NegativeWeight)
            {
                <td>@set.Reps.ToFixedString() x @set.Weight.ToFixedString()</td>
                <td>@set.Note</td>
            }
            else if (Exercise.ExerciseLogType == ExerciseLogType.Time)
            {
                <td>@set.Time.ToFixedString()</td>
                <td>@set.Note</td>
            }
            <td>
                <FluentButton OnClick="@(async () => await OnCopySet.InvokeAsync(new(Exercise.Id, set)))" IconEnd="@(new Icons.Regular.Size16.ArrowRepeatAll())" />
                <FluentButton OnClick="@(() => OnEditSetAsync(Exercise.Id, set))" IconEnd="@(new Icons.Regular.Size16.Edit())"/>
                <FluentButton OnClick="@(() => OnRemoveSetAsync(Exercise.Id, set))" IconEnd="@(new Icons.Regular.Size16.Delete())"/>
            </td>
        </tr>
    }
</table>

@code {
    [Parameter] public required List<ExerciseSetCreateDto> Sets { get; set; }
    [Parameter] public required ExerciseDto Exercise { get; set; }

    [Parameter] public EventCallback<EditSetEventArgs> OnEditSet { get; set; }
    [Parameter] public EventCallback<EditSetEventArgs> OnRemoveSet { get; set; }
    [Parameter] public EventCallback<EditSetEventArgs> OnCopySet { get; set; }

    private async Task OnEditSetAsync(Guid exerciseId, ExerciseSetCreateDto set)
    {
        await OnEditSet.InvokeAsync(new(exerciseId, set));
    }

    private async Task OnRemoveSetAsync(Guid exerciseId, ExerciseSetCreateDto set)
    {
        await OnRemoveSet.InvokeAsync(new(exerciseId, set));
    }
}