<FluentCard AreaRestricted="false">
    <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
        <FluentStack Orientation="Orientation.Vertical" Style="width:auto">
            <FluentSelect @bind-Value="@SelectedMuscleGroupId"
                          Label="Grupa mišića"
                          Items="@MuscleGroups"
                          Style="width:100%;"
                          TOption="MuscleGroupDto"
                          OptionValue="@((item) => item.Id.ToString())"
                          OptionText="@((item) => item.Name)">
            </FluentSelect>
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical" Style="width:auto">
            <FluentSelect @bind-Value="@SelectedExerciseLogType"
                          Label="Način zapisivanja"
                          Style="width:100%;"
                          TOption="ExerciseLogType">
                @foreach (var logType in Enum.GetValues<ExerciseLogType>())
                {
                    var enumDisplay = EnumHelper<ExerciseLogType>.GetDisplayValue(logType);
                    <FluentOption Value="@logType.ToString()">@enumDisplay</FluentOption>
                }
            </FluentSelect>
        </FluentStack>
    </FluentStack>
    <FluentStack HorizontalAlignment="HorizontalAlignment.Start" Style="margin-top: 1rem;">
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => OnFilter.InvokeAsync(PagedRequestDto))">Filtriraj</FluentButton>
        <FluentButton OnClick="@ClearFilter">Očisti</FluentButton>
    </FluentStack>
</FluentCard>

@code {
    [Parameter] public required ExercisePagedRequestDto PagedRequestDto { get; set; }
    [Parameter] public required ICollection<MuscleGroupDto> MuscleGroups { get; set; }
    [Parameter] public EventCallback<ExercisePagedRequestDto> OnFilter { get; set; }

    private string SelectedExerciseLogType
    {
        get => PagedRequestDto.ExerciseLogType.ToString();
        set => PagedRequestDto.ExerciseLogType = Enum.Parse<ExerciseLogType>(value);
    }

    private string SelectedMuscleGroupId
    {
        get => PagedRequestDto.MuscleGroupId.ToString();
        set => PagedRequestDto.MuscleGroupId = string.IsNullOrEmpty(value) ? Guid.Empty : Guid.Parse(value);
    }

    private void ClearFilter()
    {
        this.SelectedExerciseLogType = ExerciseLogType.Unknown.ToString();
        this.SelectedMuscleGroupId = Guid.Empty.ToString();
    }
}
