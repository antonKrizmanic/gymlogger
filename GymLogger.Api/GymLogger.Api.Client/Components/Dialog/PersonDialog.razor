@implements IAsyncDisposable
@implements IDialogContentComponent
@inject IJSRuntime JSRuntime

<FluentDialogBody>
    <FluentNavMenu Expanded="@true">
        <FluentNavLink Icon="@(new Icons.Regular.Size20.Person())" Href="Account/Manage" Match="NavLinkMatch.All">Manage your profile</FluentNavLink>        
        <FluentNavLink Icon="@(new Icons.Regular.Size20.SignOut())" Href="#" @onclick="SignOut">Odjava</FluentNavLink>
    </FluentNavMenu>
</FluentDialogBody>

@code {
    private IJSObjectReference? _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // This ensures JavaScript interop calls are made only when the component is connected to the client.
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./Layout/NavMenu.razor.js");
        }
    }

    private async Task SignOut()
    {
        if (_module != null)
        {
            await _module.InvokeVoidAsync("submitForm");
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }
}